// Code generated by Wire protocol buffer compiler, do not edit.
// Source: crypto.v1.EncryptedKey in crypto.proto
package id.unum.protos.crypto.v1;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Objects;
import okio.ByteString;

/**
 * Object to encapsulate encrypted data
 */
public final class EncryptedKey extends Message<EncryptedKey, EncryptedKey.Builder> {
  public static final ProtoAdapter<EncryptedKey> ADAPTER = new ProtoAdapter_EncryptedKey();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String iv;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String key;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String algorithm;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String did;

  public EncryptedKey(String iv, String key, String algorithm, String did) {
    this(iv, key, algorithm, did, ByteString.EMPTY);
  }

  public EncryptedKey(String iv, String key, String algorithm, String did,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (iv == null) {
      throw new IllegalArgumentException("iv == null");
    }
    this.iv = iv;
    if (key == null) {
      throw new IllegalArgumentException("key == null");
    }
    this.key = key;
    if (algorithm == null) {
      throw new IllegalArgumentException("algorithm == null");
    }
    this.algorithm = algorithm;
    if (did == null) {
      throw new IllegalArgumentException("did == null");
    }
    this.did = did;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.iv = iv;
    builder.key = key;
    builder.algorithm = algorithm;
    builder.did = did;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof EncryptedKey)) return false;
    EncryptedKey o = (EncryptedKey) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(iv, o.iv)
        && Internal.equals(key, o.key)
        && Internal.equals(algorithm, o.algorithm)
        && Internal.equals(did, o.did);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (iv != null ? iv.hashCode() : 0);
      result = result * 37 + (key != null ? key.hashCode() : 0);
      result = result * 37 + (algorithm != null ? algorithm.hashCode() : 0);
      result = result * 37 + (did != null ? did.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (iv != null) builder.append(", iv=").append(Internal.sanitize(iv));
    if (key != null) builder.append(", key=").append(Internal.sanitize(key));
    if (algorithm != null) builder.append(", algorithm=").append(Internal.sanitize(algorithm));
    if (did != null) builder.append(", did=").append(Internal.sanitize(did));
    return builder.replace(0, 2, "EncryptedKey{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<EncryptedKey, Builder> {
    public String iv;

    public String key;

    public String algorithm;

    public String did;

    public Builder() {
      iv = "";
      key = "";
      algorithm = "";
      did = "";
    }

    public Builder iv(String iv) {
      this.iv = iv;
      return this;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder algorithm(String algorithm) {
      this.algorithm = algorithm;
      return this;
    }

    public Builder did(String did) {
      this.did = did;
      return this;
    }

    @Override
    public EncryptedKey build() {
      return new EncryptedKey(iv, key, algorithm, did, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_EncryptedKey extends ProtoAdapter<EncryptedKey> {
    public ProtoAdapter_EncryptedKey() {
      super(FieldEncoding.LENGTH_DELIMITED, EncryptedKey.class, "type.googleapis.com/crypto.v1.EncryptedKey", Syntax.PROTO_3, null);
    }

    @Override
    public int encodedSize(EncryptedKey value) {
      int result = 0;
      if (!Objects.equals(value.iv, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.iv);
      }
      if (!Objects.equals(value.key, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(2, value.key);
      }
      if (!Objects.equals(value.algorithm, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(3, value.algorithm);
      }
      if (!Objects.equals(value.did, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(4, value.did);
      }
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, EncryptedKey value) throws IOException {
      if (!Objects.equals(value.iv, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.iv);
      if (!Objects.equals(value.key, "")) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.key);
      if (!Objects.equals(value.algorithm, "")) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.algorithm);
      if (!Objects.equals(value.did, "")) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.did);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, EncryptedKey value) throws IOException {
      writer.writeBytes(value.unknownFields());
      if (!Objects.equals(value.did, "")) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.did);
      if (!Objects.equals(value.algorithm, "")) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.algorithm);
      if (!Objects.equals(value.key, "")) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.key);
      if (!Objects.equals(value.iv, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.iv);
    }

    @Override
    public EncryptedKey decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.iv(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.key(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.algorithm(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.did(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public EncryptedKey redact(EncryptedKey value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
