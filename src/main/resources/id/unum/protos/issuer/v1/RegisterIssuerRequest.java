// Code generated by Wire protocol buffer compiler, do not edit.
// Source: issuer.v1.RegisterIssuerRequest in issuer.proto
package id.unum.protos.issuer.v1;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import id.unum.protos.crypto.v1.PublicKeyInfo;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Objects;
import okio.ByteString;

/**
 * Object to encapsulate an Issuer entity
 */
public final class RegisterIssuerRequest extends Message<RegisterIssuerRequest, RegisterIssuerRequest.Builder> {
  public static final ProtoAdapter<RegisterIssuerRequest> ADAPTER = new ProtoAdapter_RegisterIssuerRequest();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "customerUuid"
  )
  public final String customer_uuid;

  @WireField(
      tag = 2,
      adapter = "id.unum.protos.crypto.v1.PublicKeyInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PublicKeyInfo> publicKeyInfo;

  public RegisterIssuerRequest(String customer_uuid, List<PublicKeyInfo> publicKeyInfo) {
    this(customer_uuid, publicKeyInfo, ByteString.EMPTY);
  }

  public RegisterIssuerRequest(String customer_uuid, List<PublicKeyInfo> publicKeyInfo,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (customer_uuid == null) {
      throw new IllegalArgumentException("customer_uuid == null");
    }
    this.customer_uuid = customer_uuid;
    this.publicKeyInfo = Internal.immutableCopyOf("publicKeyInfo", publicKeyInfo);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.customer_uuid = customer_uuid;
    builder.publicKeyInfo = Internal.copyOf(publicKeyInfo);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RegisterIssuerRequest)) return false;
    RegisterIssuerRequest o = (RegisterIssuerRequest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(customer_uuid, o.customer_uuid)
        && publicKeyInfo.equals(o.publicKeyInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (customer_uuid != null ? customer_uuid.hashCode() : 0);
      result = result * 37 + publicKeyInfo.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (customer_uuid != null) builder.append(", customer_uuid=").append(Internal.sanitize(customer_uuid));
    if (!publicKeyInfo.isEmpty()) builder.append(", publicKeyInfo=").append(publicKeyInfo);
    return builder.replace(0, 2, "RegisterIssuerRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RegisterIssuerRequest, Builder> {
    public String customer_uuid;

    public List<PublicKeyInfo> publicKeyInfo;

    public Builder() {
      customer_uuid = "";
      publicKeyInfo = Internal.newMutableList();
    }

    public Builder customer_uuid(String customer_uuid) {
      this.customer_uuid = customer_uuid;
      return this;
    }

    public Builder publicKeyInfo(List<PublicKeyInfo> publicKeyInfo) {
      Internal.checkElementsNotNull(publicKeyInfo);
      this.publicKeyInfo = publicKeyInfo;
      return this;
    }

    @Override
    public RegisterIssuerRequest build() {
      return new RegisterIssuerRequest(customer_uuid, publicKeyInfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RegisterIssuerRequest extends ProtoAdapter<RegisterIssuerRequest> {
    public ProtoAdapter_RegisterIssuerRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, RegisterIssuerRequest.class, "type.googleapis.com/issuer.v1.RegisterIssuerRequest", Syntax.PROTO_3, null);
    }

    @Override
    public int encodedSize(RegisterIssuerRequest value) {
      int result = 0;
      if (!Objects.equals(value.customer_uuid, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.customer_uuid);
      }
      result += PublicKeyInfo.ADAPTER.asRepeated().encodedSizeWithTag(2, value.publicKeyInfo);
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, RegisterIssuerRequest value) throws IOException {
      if (!Objects.equals(value.customer_uuid, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.customer_uuid);
      PublicKeyInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.publicKeyInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, RegisterIssuerRequest value) throws IOException {
      writer.writeBytes(value.unknownFields());
      PublicKeyInfo.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.publicKeyInfo);
      if (!Objects.equals(value.customer_uuid, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.customer_uuid);
    }

    @Override
    public RegisterIssuerRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.customer_uuid(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.publicKeyInfo.add(PublicKeyInfo.ADAPTER.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public RegisterIssuerRequest redact(RegisterIssuerRequest value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.publicKeyInfo, PublicKeyInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
