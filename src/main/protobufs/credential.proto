syntax = "proto3";

package credential.v1;

option java_multiple_files = true;
option java_outer_classname = "CredentialProto";
option java_package = "id.unum.protos.credential.v1";

import "proof.proto";
import "crypto.proto";
import "google/protobuf/timestamp.proto";

/**
 * Object to encapsulate Credential status information.
 */
message CredentialStatus {
  string id = 1;
  string type = 2;
}

/**
 * Object to encapsulate relevant credential information.
 */
message UnsignedCredential {
  repeated string context = 1;
  string credential_subject = 2;
  CredentialStatus credential_status = 3;
  string issuer = 4;
  repeated string type = 5;
  string id = 6;
  google.protobuf.Timestamp issuance_date = 7;
  google.protobuf.Timestamp expiration_date = 16; // optional in the ts types
}

/**
 * Object which incorporates the relevant credential information in addition to a cryptographic proof so that the Credential is verifiable.
 * aka "SignedCredential". Tightly coupled with UnsignedCredential.
 */
message Credential {
    repeated string context = 1;
    string credential_subject = 2;
    CredentialStatus credential_status = 3;
    string issuer = 4;
    repeated string type = 5;
    string id = 6;
    google.protobuf.Timestamp issuance_date = 7;
    proof.v1.Proof proof = 8;
    google.protobuf.Timestamp expiration_date = 16; // optional in the ts types
}

/**
 * Object that encapsulates Credential information requested.
 */
message CredentialRequest {
  string type = 1; // the string matching the desire credential type
  repeated string issuers = 2; // list of acceptable issuer DIDs that have issued the credential
  bool required = 3; // to denote wether this particular credential is required in response to the PresentationRequest. Defaults behavior resolves this to true.
}

/**
 * Object that encapsulates an EncryptedCredential.
 */
 message EncryptedCredential {
  string credentialId = 1; 
  string subject = 2; 
  string issuer = 3; 
  string type = 4;
  crypto.v1.EncryptedData data = 5;
}

/**
 * Object that encapsulates a request to Unum ID SaaS to issue credentials.
 * Note: that the while can handle multiple EncryptedCredentials that is for the edge case of 
 * the same credential (id, type, subject, issuer) being encrypted with different holder public keys
 */
 message IssueCredentialRequest {
   string credentialId = 1;
   string subject = 2;
   string issuer = 3; 
   string type = 4;
   repeated EncryptedCredential encryptedCredentials = 5;
 }

/**
 * Object that encapsulates CredentialStatus information.
 */
message CredentialStatusInfo {
  string uuid = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updatedAt = 3;
  string credentialId = 4;
  string status = 5; //note could be an enum but just simplier this way... only valid values are: revoked, valid
}