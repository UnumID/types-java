// Code generated by Wire protocol buffer compiler, do not edit.
// Source: crypto.v1.KeyPairSet in crypto.proto
package id.unum.protos.crypto.v1;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.Objects;
import okio.ByteString;

/**
 * Object to encapsulate a key pair set
 */
public final class KeyPairSet extends Message<KeyPairSet, KeyPairSet.Builder> {
  public static final ProtoAdapter<KeyPairSet> ADAPTER = new ProtoAdapter_KeyPairSet();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "id.unum.protos.crypto.v1.KeyPair#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final KeyPair signing;

  @WireField(
      tag = 2,
      adapter = "id.unum.protos.crypto.v1.KeyPair#ADAPTER",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final KeyPair encryption;

  public KeyPairSet(KeyPair signing, KeyPair encryption) {
    this(signing, encryption, ByteString.EMPTY);
  }

  public KeyPairSet(KeyPair signing, KeyPair encryption, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.signing = signing;
    this.encryption = encryption;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.signing = signing;
    builder.encryption = encryption;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof KeyPairSet)) return false;
    KeyPairSet o = (KeyPairSet) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(signing, o.signing)
        && Internal.equals(encryption, o.encryption);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (signing != null ? signing.hashCode() : 0);
      result = result * 37 + (encryption != null ? encryption.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (signing != null) builder.append(", signing=").append(signing);
    if (encryption != null) builder.append(", encryption=").append(encryption);
    return builder.replace(0, 2, "KeyPairSet{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<KeyPairSet, Builder> {
    public KeyPair signing;

    public KeyPair encryption;

    public Builder() {
    }

    public Builder signing(KeyPair signing) {
      this.signing = signing;
      return this;
    }

    public Builder encryption(KeyPair encryption) {
      this.encryption = encryption;
      return this;
    }

    @Override
    public KeyPairSet build() {
      return new KeyPairSet(signing, encryption, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_KeyPairSet extends ProtoAdapter<KeyPairSet> {
    public ProtoAdapter_KeyPairSet() {
      super(FieldEncoding.LENGTH_DELIMITED, KeyPairSet.class, "type.googleapis.com/crypto.v1.KeyPairSet", Syntax.PROTO_3, null);
    }

    @Override
    public int encodedSize(KeyPairSet value) {
      int result = 0;
      if (!Objects.equals(value.signing, null)) {
        result += KeyPair.ADAPTER.encodedSizeWithTag(1, value.signing);
      }
      if (!Objects.equals(value.encryption, null)) {
        result += KeyPair.ADAPTER.encodedSizeWithTag(2, value.encryption);
      }
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, KeyPairSet value) throws IOException {
      if (!Objects.equals(value.signing, null)) KeyPair.ADAPTER.encodeWithTag(writer, 1, value.signing);
      if (!Objects.equals(value.encryption, null)) KeyPair.ADAPTER.encodeWithTag(writer, 2, value.encryption);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, KeyPairSet value) throws IOException {
      writer.writeBytes(value.unknownFields());
      if (!Objects.equals(value.encryption, null)) KeyPair.ADAPTER.encodeWithTag(writer, 2, value.encryption);
      if (!Objects.equals(value.signing, null)) KeyPair.ADAPTER.encodeWithTag(writer, 1, value.signing);
    }

    @Override
    public KeyPairSet decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.signing(KeyPair.ADAPTER.decode(reader)); break;
          case 2: builder.encryption(KeyPair.ADAPTER.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public KeyPairSet redact(KeyPairSet value) {
      Builder builder = value.newBuilder();
      if (builder.signing != null) builder.signing = KeyPair.ADAPTER.redact(builder.signing);
      if (builder.encryption != null) builder.encryption = KeyPair.ADAPTER.redact(builder.encryption);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
