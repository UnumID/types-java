// Code generated by Wire protocol buffer compiler, do not edit.
// Source: crypto.v1.PublicKeyInfo in crypto.proto
package id.unum.protos.crypto.v1;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.time.Instant;
import java.util.Objects;
import okio.ByteString;

/**
 * Probably do not want to use this because could awkard to get the string representation
 * i.e. String pemName = encoding.getValueDescriptor().getName(); //Encoding="PEM"
 * ref: https://stackoverflow.com/questions/17799883/how-to-print-enum-names-instead-of-int-value-of-a-protocol-buffer-java/38795852
 * /**
 *  * Enum to encapsulate encoding options
 *  &#42;/
 * enum Encoding {
 *     PEM = 0;
 *     BASE_58 = 1;
 * }
 * /**
 *  * Enum to encapsulate encoding options
 *  &#42;/
 *  enum KeyType {
 *     RSA = 0;
 *     SECP256R1 = 1;
 * }
 * /**
 *  * Enum to encapsulate encoding options
 *  &#42;/
 *  enum Status {
 *     INVALID = 0;
 *     VALID = 1;
 * }
 * Object to encapsulate public key info
 */
public final class PublicKeyInfo extends Message<PublicKeyInfo, PublicKeyInfo.Builder> {
  public static final ProtoAdapter<PublicKeyInfo> ADAPTER = new ProtoAdapter_PublicKeyInfo();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "publicKey"
  )
  public final String public_key;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String encoding;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String type;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String status;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "createdAt"
  )
  public final Instant created_at;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INSTANT",
      label = WireField.Label.OMIT_IDENTITY,
      jsonName = "updatedAt"
  )
  public final Instant updated_at;

  public PublicKeyInfo(String id, String public_key, String encoding, String type, String status,
      Instant created_at, Instant updated_at) {
    this(id, public_key, encoding, type, status, created_at, updated_at, ByteString.EMPTY);
  }

  public PublicKeyInfo(String id, String public_key, String encoding, String type, String status,
      Instant created_at, Instant updated_at, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (id == null) {
      throw new IllegalArgumentException("id == null");
    }
    this.id = id;
    if (public_key == null) {
      throw new IllegalArgumentException("public_key == null");
    }
    this.public_key = public_key;
    if (encoding == null) {
      throw new IllegalArgumentException("encoding == null");
    }
    this.encoding = encoding;
    if (type == null) {
      throw new IllegalArgumentException("type == null");
    }
    this.type = type;
    if (status == null) {
      throw new IllegalArgumentException("status == null");
    }
    this.status = status;
    this.created_at = created_at;
    this.updated_at = updated_at;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.public_key = public_key;
    builder.encoding = encoding;
    builder.type = type;
    builder.status = status;
    builder.created_at = created_at;
    builder.updated_at = updated_at;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PublicKeyInfo)) return false;
    PublicKeyInfo o = (PublicKeyInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(public_key, o.public_key)
        && Internal.equals(encoding, o.encoding)
        && Internal.equals(type, o.type)
        && Internal.equals(status, o.status)
        && Internal.equals(created_at, o.created_at)
        && Internal.equals(updated_at, o.updated_at);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (public_key != null ? public_key.hashCode() : 0);
      result = result * 37 + (encoding != null ? encoding.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (created_at != null ? created_at.hashCode() : 0);
      result = result * 37 + (updated_at != null ? updated_at.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(Internal.sanitize(id));
    if (public_key != null) builder.append(", public_key=").append(Internal.sanitize(public_key));
    if (encoding != null) builder.append(", encoding=").append(Internal.sanitize(encoding));
    if (type != null) builder.append(", type=").append(Internal.sanitize(type));
    if (status != null) builder.append(", status=").append(Internal.sanitize(status));
    if (created_at != null) builder.append(", created_at=").append(created_at);
    if (updated_at != null) builder.append(", updated_at=").append(updated_at);
    return builder.replace(0, 2, "PublicKeyInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PublicKeyInfo, Builder> {
    public String id;

    public String public_key;

    public String encoding;

    public String type;

    public String status;

    public Instant created_at;

    public Instant updated_at;

    public Builder() {
      id = "";
      public_key = "";
      encoding = "";
      type = "";
      status = "";
    }

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public Builder public_key(String public_key) {
      this.public_key = public_key;
      return this;
    }

    public Builder encoding(String encoding) {
      this.encoding = encoding;
      return this;
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public Builder status(String status) {
      this.status = status;
      return this;
    }

    public Builder created_at(Instant created_at) {
      this.created_at = created_at;
      return this;
    }

    public Builder updated_at(Instant updated_at) {
      this.updated_at = updated_at;
      return this;
    }

    @Override
    public PublicKeyInfo build() {
      return new PublicKeyInfo(id, public_key, encoding, type, status, created_at, updated_at, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PublicKeyInfo extends ProtoAdapter<PublicKeyInfo> {
    public ProtoAdapter_PublicKeyInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, PublicKeyInfo.class, "type.googleapis.com/crypto.v1.PublicKeyInfo", Syntax.PROTO_3, null);
    }

    @Override
    public int encodedSize(PublicKeyInfo value) {
      int result = 0;
      if (!Objects.equals(value.id, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.id);
      }
      if (!Objects.equals(value.public_key, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(2, value.public_key);
      }
      if (!Objects.equals(value.encoding, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(3, value.encoding);
      }
      if (!Objects.equals(value.type, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(4, value.type);
      }
      if (!Objects.equals(value.status, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(5, value.status);
      }
      if (!Objects.equals(value.created_at, null)) {
        result += ProtoAdapter.INSTANT.encodedSizeWithTag(6, value.created_at);
      }
      if (!Objects.equals(value.updated_at, null)) {
        result += ProtoAdapter.INSTANT.encodedSizeWithTag(7, value.updated_at);
      }
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, PublicKeyInfo value) throws IOException {
      if (!Objects.equals(value.id, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (!Objects.equals(value.public_key, "")) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.public_key);
      if (!Objects.equals(value.encoding, "")) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.encoding);
      if (!Objects.equals(value.type, "")) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.type);
      if (!Objects.equals(value.status, "")) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.status);
      if (!Objects.equals(value.created_at, null)) ProtoAdapter.INSTANT.encodeWithTag(writer, 6, value.created_at);
      if (!Objects.equals(value.updated_at, null)) ProtoAdapter.INSTANT.encodeWithTag(writer, 7, value.updated_at);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, PublicKeyInfo value) throws IOException {
      writer.writeBytes(value.unknownFields());
      if (!Objects.equals(value.updated_at, null)) ProtoAdapter.INSTANT.encodeWithTag(writer, 7, value.updated_at);
      if (!Objects.equals(value.created_at, null)) ProtoAdapter.INSTANT.encodeWithTag(writer, 6, value.created_at);
      if (!Objects.equals(value.status, "")) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.status);
      if (!Objects.equals(value.type, "")) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.type);
      if (!Objects.equals(value.encoding, "")) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.encoding);
      if (!Objects.equals(value.public_key, "")) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.public_key);
      if (!Objects.equals(value.id, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
    }

    @Override
    public PublicKeyInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.public_key(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.encoding(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.status(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.created_at(ProtoAdapter.INSTANT.decode(reader)); break;
          case 7: builder.updated_at(ProtoAdapter.INSTANT.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public PublicKeyInfo redact(PublicKeyInfo value) {
      Builder builder = value.newBuilder();
      if (builder.created_at != null) builder.created_at = ProtoAdapter.INSTANT.redact(builder.created_at);
      if (builder.updated_at != null) builder.updated_at = ProtoAdapter.INSTANT.redact(builder.updated_at);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
