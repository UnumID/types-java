// Code generated by Wire protocol buffer compiler, do not edit.
// Source: credential.v1.CredentialRequest in credential.proto
package id.unum.protos.credential.v1;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.ReverseProtoWriter;
import com.squareup.wire.Syntax;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Objects;
import okio.ByteString;

/**
 * Object that encapsulates Credential information requested.
 */
public final class CredentialRequest extends Message<CredentialRequest, CredentialRequest.Builder> {
  public static final ProtoAdapter<CredentialRequest> ADAPTER = new ProtoAdapter_CredentialRequest();

  private static final long serialVersionUID = 0L;

  /**
   * the string matching the desire credential type
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final String type;

  /**
   * list of acceptable issuer DIDs that have issued the credential
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> issuers;

  /**
   * to denote wether this particular credential is required in response to the PresentationRequest. Defaults behavior resolves this to true.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL",
      label = WireField.Label.OMIT_IDENTITY
  )
  public final boolean required;

  public CredentialRequest(String type, List<String> issuers, boolean required) {
    this(type, issuers, required, ByteString.EMPTY);
  }

  public CredentialRequest(String type, List<String> issuers, boolean required,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    if (type == null) {
      throw new IllegalArgumentException("type == null");
    }
    this.type = type;
    this.issuers = Internal.immutableCopyOf("issuers", issuers);
    this.required = required;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.issuers = Internal.copyOf(issuers);
    builder.required = required;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CredentialRequest)) return false;
    CredentialRequest o = (CredentialRequest) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(type, o.type)
        && issuers.equals(o.issuers)
        && Internal.equals(required, o.required);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + issuers.hashCode();
      result = result * 37 + Boolean.hashCode(required);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(Internal.sanitize(type));
    if (!issuers.isEmpty()) builder.append(", issuers=").append(Internal.sanitize(issuers));
    builder.append(", required=").append(required);
    return builder.replace(0, 2, "CredentialRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CredentialRequest, Builder> {
    public String type;

    public List<String> issuers;

    public boolean required;

    public Builder() {
      type = "";
      issuers = Internal.newMutableList();
      required = false;
    }

    /**
     * the string matching the desire credential type
     */
    public Builder type(String type) {
      this.type = type;
      return this;
    }

    /**
     * list of acceptable issuer DIDs that have issued the credential
     */
    public Builder issuers(List<String> issuers) {
      Internal.checkElementsNotNull(issuers);
      this.issuers = issuers;
      return this;
    }

    /**
     * to denote wether this particular credential is required in response to the PresentationRequest. Defaults behavior resolves this to true.
     */
    public Builder required(boolean required) {
      this.required = required;
      return this;
    }

    @Override
    public CredentialRequest build() {
      return new CredentialRequest(type, issuers, required, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CredentialRequest extends ProtoAdapter<CredentialRequest> {
    public ProtoAdapter_CredentialRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, CredentialRequest.class, "type.googleapis.com/credential.v1.CredentialRequest", Syntax.PROTO_3, null);
    }

    @Override
    public int encodedSize(CredentialRequest value) {
      int result = 0;
      if (!Objects.equals(value.type, "")) {
        result += ProtoAdapter.STRING.encodedSizeWithTag(1, value.type);
      }
      result += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.issuers);
      if (!Objects.equals(value.required, false)) {
        result += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.required);
      }
      result += value.unknownFields().size();
      return result;
    }

    @Override
    public void encode(ProtoWriter writer, CredentialRequest value) throws IOException {
      if (!Objects.equals(value.type, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.type);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.issuers);
      if (!Objects.equals(value.required, false)) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.required);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public void encode(ReverseProtoWriter writer, CredentialRequest value) throws IOException {
      writer.writeBytes(value.unknownFields());
      if (!Objects.equals(value.required, false)) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.required);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.issuers);
      if (!Objects.equals(value.type, "")) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.type);
    }

    @Override
    public CredentialRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.issuers.add(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.required(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            reader.readUnknownField(tag);
          }
        }
      }
      builder.addUnknownFields(reader.endMessageAndGetUnknownFields(token));
      return builder.build();
    }

    @Override
    public CredentialRequest redact(CredentialRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
